// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "SimplexNoise.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float> result;

uint repeats;
float maxStrength;

float4 fractalNoiseGrad(float3 pos, int numLayers, float scale, float persistence, float lacunarity)
{
    float4 noise = 0;
    float amplitude = 1;
    float frequency = scale;
    for (int i = 0; i < numLayers; i++)
    {
        noise += snoise_grad(pos * frequency) * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    return noise;
}

[numthreads(512,1,1)]
void CSMain (uint id : SV_DispatchThreadID)
{
    if (id >= repeats)
    {
        return;
    }
    
    float3 pos = vertices[id];
    float height = length(pos);

    float3 offset = fractalNoiseGrad(pos, 4, 25, .5, 2).xyz;
    offset = smoothstep(-1, 1, offset) * 2 - 1;
    float3 newPos = pos + offset * maxStrength;

    newPos = normalize(newPos) * height;
    vertices[id] = newPos;
}
